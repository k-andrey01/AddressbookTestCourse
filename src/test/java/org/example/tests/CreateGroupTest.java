package org.example.tests;// Generated by Selenium IDE
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.security.AnyTypePermission;
import org.example.model.GroupData;
import org.example.model.Groups;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;

@RunWith(Parameterized.class)
public class CreateGroupTest extends TestBase {

  private GroupData group;

  public CreateGroupTest(GroupData group) {
    this.group = group;
  }

  @Parameterized.Parameters
  public static Collection<Object[]> validGroups() throws IOException {
    List<Object[]> list = new ArrayList<>();
    BufferedReader reader = new BufferedReader(new FileReader(new File("src/test/resources/groups.xml")));
    String xml = "";
    String line = reader.readLine();
    while (line != null){
      xml += line;
      line = reader.readLine();
    }
    XStream xStream = new XStream();
    xStream.processAnnotations(GroupData.class);
    xStream.addPermission(AnyTypePermission.ANY);
    List<GroupData> groups = (List<GroupData>) xStream.fromXML(xml);
    return groups.stream().map(g -> new Object[] {g}).collect(Collectors.toList());
  }

  @Test
  public void testGroupCreation() {
    app.getNavigationHelper().goToGroupPage();
    Groups before = app.getGroupHelper().getAllGroups();

    app.getGroupHelper().createGroup(group);
    assertThat(app.getGroupHelper().getGroupCount(), equalTo(before.size() + 1));

    Groups after = app.getGroupHelper().getAllGroups();
    assertThat(after, equalTo(
            before.withAdded(group.withId(after.stream().mapToInt(g -> g.getId()).max().getAsInt()))));
  }

  //тест с отрицательным результатом
  @Test
  @Ignore
  public void testBadGroupCreation() {
    app.getNavigationHelper().goToGroupPage();
    Groups before = app.getGroupHelper().getAllGroups();

    GroupData group = new GroupData().withGroupName("group1");
    app.getGroupHelper().createGroup(group);
    assertThat(app.getGroupHelper().getGroupCount(), equalTo(before.size()));

    Groups after = app.getGroupHelper().getAllGroups();
    assertThat(after, equalTo(before));
  }

}
